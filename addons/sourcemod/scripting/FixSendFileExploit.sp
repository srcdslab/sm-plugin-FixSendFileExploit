#include <sourcemod>
#include <sdktools>

#pragma semicolon 1
#pragma newdecls required

#define MAX_FILES_ALLOWED_WHILE_ACTIVE_PER_MAP 256
#define MAX_FILES_ALLOWED_UPLOAD 32

bool InLevel[MAXPLAYERS + 1] = {false, ...};
int RequestCount[MAXPLAYERS + 1] = {0, ...};
int SendCount[MAXPLAYERS+1] = {0, ...};

public Plugin myinfo =
{
	name = "SendFile Exploit Fix",
	author = "backwards",
	description = "Prevents Clients From Exploiting The Un-Patched SRCDS SendFile Command.",
	version = "3.1",
	url = "http://www.steamcommunity.com/id/mypassword"
}

public void OnPluginStart()
{
	CreateTimer(5.0, DecrementThread, _, TIMER_REPEAT);

	if (GetEngineVersion() != Engine_CSGO)
		return;
	else
	{
		Address addy = GameConfGetAddress(LoadGameConfigFile("FixSendFileExploit.games"), "CheckReceivingList");

		int OS;
		OS = LoadFromAddress(addy  + view_as<Address>(1), NumberType_Int8);
		switch(OS)
		{
			case 0x89: //Linux
			{
				for(int i = 0;i<5;i++)
					StoreToAddress((addy + view_as<Address>(0x3B9) + view_as<Address>(i)), 0x90, NumberType_Int8);
			}
			case 0x8B: //Windows
			{
				for(int i = 0;i<2;i++)
					StoreToAddress((addy + view_as<Address>(0x270) + view_as<Address>(i)), 0x90, NumberType_Int8);
			}
			default:
			{
				SetFailState("CheckReceivingList Signature Incorrect. (0x%.2x)", OS);
			}
		}
	}
}

public void OnMapStart()
{
	for (int client = 1; client <= MaxClients; client++)
		if(IsValidClient(client))
			if(IsClientInGame(client))
			{
				InLevel[client] = true;
				RequestCount[client] = 0;
				SendCount[client] = 0;
			}
}

public void OnMapEnd()
{
	for (int client = 1; client <= MaxClients; client++)
	{
		InLevel[client] = false;
		RequestCount[client] = 0;
		SendCount[client] = 0;
	}
}

public void OnClientPutInServer(int client)
{
	InLevel[client] = true;
	RequestCount[client] = 0;
	SendCount[client] = 0;
}

public void OnClientDisconnect(int client)
{
	RequestCount[client] = 0;
	SendCount[client] = 0;
}

public Action DecrementThread(Handle timer, any unused)
{
	for (int client = 0; client <= MaxClients; client++)
	{
		RequestCount[client] -= 32;
		if(RequestCount[client] < 0)
			RequestCount[client] = 0;
	}
	
	return Plugin_Continue;
}

public Action OnFileSend(int client, const char[] sFile)
{
	if (InLevel[client])
	{
		RequestCount[client]++;
		if (RequestCount[client] > MAX_FILES_ALLOWED_WHILE_ACTIVE_PER_MAP)
		{
			if (!IsClientInKickQueue(client))
			{
				LogAction(-1, -1, "\"%L\" has been kicked for ServerCrashExploitAttempt. (MAX_FILES_ALLOWED_WHILE_ACTIVE_PER_MAP)", client);
				KickClient(client, "ServerCrashExploitAttempt.");
			}

			return Plugin_Stop;
		}
	}
	
	return Plugin_Continue;
}

public Action OnFileReceive(int client, const char[] sFile)
{
	SendCount[client]++;
	
	if(SendCount[client] > MAX_FILES_ALLOWED_UPLOAD)
	{
		if(!IsClientInKickQueue(client))
		{
			LogAction(-1, -1, "\"%L\" has been kicked for ServerCrashExploitAttempt. (MAX_FILES_ALLOWED_UPLOAD)", client);
			KickClient(client, "ServerCrashExploitAttempt.");
		}

		return Plugin_Stop;
	}

	return Plugin_Continue;
}

bool IsValidClient(int client, bool nobots = true)
{
	if (client <= 0 || client > MaxClients || !IsClientConnected(client) || (nobots && IsFakeClient(client)))
	{
		return false;
	}
	return IsClientInGame(client);
}